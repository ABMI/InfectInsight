#' createCohortTable function
#'
#' This is a function which can create a sample Cohort Table
#'
#'
#' @param connection
#' @param oracleTempSchema
#' @param cdmDatabaseSchema
#' @param cohortDatabaseSchema
#' @param cohortTable
#' @param cohortTable_temp
#' @param DiganosisConceptID
#' @param targetCohortId
#' @param T_createCohort
#' @param T_generateCohort
#'
#' @export createCohortTable
createCohortTable <- function(connection,
                              oracleTempSchema,
                              cohortDatabaseSchema,
                              cohortTable
){
  # Create Cohort table in your DB
  sql <- SqlRender::loadRenderTranslateSql(sqlFilename = "CreateCohortTable.sql",
                                           packageName = "infection",
                                           dbms = attr(connection, "dbms"),
                                           oracleTempSchema = oracleTempSchema,
                                           cohort_database_schema = cohortDatabaseSchema,
                                           cohort_table = cohortTable
  )
  DatabaseConnector::executeSql(connection,
                                sql,
                                progressBar = TRUE,
                                reportOverallTime = TRUE
  )
}


#' @export cohortGeneration
cohortGeneration <- function(connection,
                             oracleTempSchema,
                             cdmDatabaseSchema,
                             cohortDatabaseSchema,
                             cohortTable,
                             targetCohortId,
                             DiganosisConceptID
){
  # Insert multiple target cohort
  sql <- SqlRender::loadRenderTranslateSql(sqlFilename = "GenerationCohort.sql",
                                           packageName = "infection",
                                           dbms = attr(connection,"dbms"),
                                           oracleTempSchema = oracleTempSchema,
                                           cdm_database_schema = cdmDatabaseSchema,
                                           vocabulary_database_schema = cdmDatabaseSchema,
                                           target_database_schema = cohortDatabaseSchema,
                                           target_cohort_table = cohortTable,
                                           target_cohort_id = targetCohortId,
                                           DiganosisConceptID = DiganosisConceptID
  )
  DatabaseConnector::executeSql(connection,
                                sql,
                                progressBar = TRUE,
                                reportOverallTime = TRUE
  )
}

#' @export CreateCohort
CreateCohort <- function(createCohort,
                         generateCohort,
                         connection,
                         cohortDatabaseSchema,
                         cohortTable,
                         DiganosisConceptID){

  # Create cohort table
  if(createCohort){
    createCohortTable(connection,
                      oracleTempSchema,
                      cohortDatabaseSchema,
                      cohortTable)
  }

  # Generate target cohort
  if(generateCohort){
    cohortGeneration(connection,
                     oracleTempSchema,
                     cdmDatabaseSchema,
                     cohortDatabaseSchema,
                     cohortTable,
                     targetCohortId,
                     DiganosisConceptID)
  }

}

#' @export loadCohortTable_dg
loadCohortTable_dg <- function(connection,
                               cohortDatabaseSchema,
                               cohortTable
                               ){

  sql_dg <- "SELECT a.cohort_definition_id, a.subject_id, a.cohort_start_date, b.year_of_birth, year(a.cohort_start_date)-b.year_of_birth as diagnosis_age, b.gender_source_value, b.location_id, c.city, c.state, d.death_date
             FROM @cohort_database_schema.@cohort_table a
             left outer join @cdm_database_schema.person b on a.subject_id = b.person_id
             left outer join @cdm_database_schema.location c on b.location_id = c.location_id
             left outer join @cdm_database_schema.death d on a.subject_id = d.person_id;"

  sql_dg <- SqlRender::render(sql_dg,
                                 cohort_database_schema = cohortDatabaseSchema,
                                 cdm_database_schema = cdmDatabaseSchema,
                                 cohort_table = cohortTable)

  df_dg <- as.data.frame(DatabaseConnector::querySql(connection, sql_dg))


  # Change the sex name
  df_dg$GENDER_SOURCE_VALUE <- gsub("F", "Female", df_dg$GENDER_SOURCE_VALUE)
  df_dg$GENDER_SOURCE_VALUE <- gsub("M", "Male", df_dg$GENDER_SOURCE_VALUE)

  # Add the age group column
  df_dg <- df_dg %>%
    mutate(ageGroup = as.numeric((DIAGNOSIS_AGE %/% 10) * 10))

  for(i in 1:nrow(df_dg)){
    if(df_dg$LOCATION_ID[i] %in% c(1:31)){df_dg$STATE[i] <- "Busan"}
    else if(df_dg$LOCATION_ID[i] %in% c(32:49)){df_dg$STATE[i] <- "Daegu"}
    else if(df_dg$LOCATION_ID[i] %in% c(50:63)){df_dg$STATE[i] <- "Daejeon"}
    else if(df_dg$LOCATION_ID[i] %in% c(64:75)){df_dg$STATE[i] <- "Gwangju"}
    else if(df_dg$LOCATION_ID[i] %in% c(76:93, 452)){df_dg$STATE[i] <- "Incheon"}
    else if(df_dg$LOCATION_ID[i] %in% c(94:95)){df_dg$STATE[i] <- "Sejong-si"}
    else if(df_dg$LOCATION_ID[i] %in% c(96:165)){df_dg$STATE[i] <- "Seoul"}
    else if(df_dg$LOCATION_ID[i] %in% c(166:174)){df_dg$STATE[i] <- "Ulsan"}
    else if(df_dg$LOCATION_ID[i] %in% c(175:196)){df_dg$STATE[i] <- "Chungcheongbuk-do"}
    else if(df_dg$LOCATION_ID[i] %in% c(197:220)){df_dg$STATE[i] <- "Chungcheongnam-do"}
    else if(df_dg$LOCATION_ID[i] %in% c(221:246)){df_dg$STATE[i] <- "Gangwon-do"}
    else if(df_dg$LOCATION_ID[i] %in% c(247:324)){df_dg$STATE[i] <- "Gyeonggi-do"}
    else if(df_dg$LOCATION_ID[i] %in% c(325:365)){df_dg$STATE[i] <- "Gyeongsangbuk-do"}
    else if(df_dg$LOCATION_ID[i] %in% c(366:396)){df_dg$STATE[i] <- "Gyeongsangnam-do"}
    else if(df_dg$LOCATION_ID[i] %in% c(397:402)){df_dg$STATE[i] <- "Jeju-do"}
    else if(df_dg$LOCATION_ID[i] %in% c(403:424)){df_dg$STATE[i] <- "Jeollabuk-do"}
    else if(df_dg$LOCATION_ID[i] %in% c(425:451)){df_dg$STATE[i] <- "Jellanam-do"}
  }

  df_dg <- rename(df_dg, "Region"="STATE")

  return(df_dg)
}


#' @export loadCohortTable_v
loadCohortTable_v <- function(connection,
                               cohortDatabaseSchema,
                               cohortTable
){

  sql_v <- "SELECT a.cohort_definition_id, a.subject_id, a.cohort_start_date, b.visit_concept_id, b.visit_start_date, b.visit_end_date, b.care_site_id, c.care_site_name
             FROM @cohort_database_schema.@cohort_table a
             left outer join @cdm_database_schema.visit_occurrence b on a.subject_id = b.person_id
             left outer join @cdm_database_schema.care_site c on b.care_site_id = c.care_site_id;"

  sql_v <- SqlRender::render(sql_v,
                             cohort_database_schema = cohortDatabaseSchema,
                             cdm_database_schema = cdmDatabaseSchema,
                             cohort_table = cohortTable)

  df_v <- as.data.frame(DatabaseConnector::querySql(connection, sql_v))

  return(df_v)
}


#' @export loadCohortTable_cp
loadCohortTable_cp <- function(connection,
                              cohortDatabaseSchema,
                              cohortTable
){

  sql_cp <- "SELECT a.cohort_definition_id, a.subject_id, a.cohort_start_date, b.condition_concept_id, b.condition_start_date, b.condition_end_date, c.procedure_concept_id, c.procedure_date
             FROM @cohort_database_schema.@cohort_table a
             left outer join @cdm_database_schema.condition_occurrence b on a.subject_id = b.person_id
             left outer join @cdm_database_schema.procedure_occurrence c on a.subject_id = c.person_id;"

  sql_cp <- SqlRender::render(sql_cp,
                             cohort_database_schema = cohortDatabaseSchema,
                             cdm_database_schema = cdmDatabaseSchema,
                             cohort_table = cohortTable)

  df_cp <- as.data.frame(DatabaseConnector::querySql(connection, sql_cp))

  return(df_cp)
}

