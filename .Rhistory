for (date in date_range) {
col_name <- as.character(as.Date(date))  # 컬럼명으로 사용할 날짜를 문자열로 저장
filterSubject[[col_name]] <- ifelse(date >= filterSubject$DRUG_EXPOSURE_START_DATE & date <= filterSubject$DRUG_EXPOSURE_END_DATE, "O", "")
}
str(filterSubject)
filterSubject %>%
arrange(desc(DRUG_EXPOSURE_START_DATE), DOSE_UNIT_SOURCE_VALUE, CONCEPT_NAME) %>%
select(-PERSON_ID, -DRUG_CONCEPT_ID, -QUANTITY, -DAYS_SUPPLY)
filterSubject %>%
arrange(desc(DRUG_EXPOSURE_START_DATE), DOSE_UNIT_SOURCE_VALUE, CONCEPT_NAME) %>%
select(-PERSON_ID, -DRUG_CONCEPT_ID, -DOSE_UNIT_SOURCE_VALUE, -QUANTITY, -DAYS_SUPPLY, -ONE_DAY)
setnames(arrangeTable,
old = c("CONCEPT_NAME",
"DRUG_EXPOSURE_START_DATE",
"DRUG_EXPOSURE_END_DATE",
"ONE_UNIT"),
new = c("Drug Name",
"Date of prescription",
"Medication end date",
"Medication period(days)")
)
arrangeTable <- filterSubject %>%
arrange(desc(DRUG_EXPOSURE_START_DATE), DOSE_UNIT_SOURCE_VALUE, CONCEPT_NAME) %>%
select(-PERSON_ID, -DRUG_CONCEPT_ID, -DOSE_UNIT_SOURCE_VALUE, -QUANTITY, -DAYS_SUPPLY, -ONE_DAY)
setnames(arrangeTable,
old = c("CONCEPT_NAME",
"DRUG_EXPOSURE_START_DATE",
"DRUG_EXPOSURE_END_DATE",
"ONE_UNIT"),
new = c("Drug Name",
"Date of prescription",
"Medication end date",
"Medication period(days)")
)
drugData <- as.data.frame(arrangeTable)
datatable(
drugData,
options = list(
selection = "single",
pageLength = 20)
) %>%
formatStyle(
columns = 1:5,
textAlign = "left",
selector = "th"
)
arrangeTable <- filterSubject %>%
arrange(desc(DRUG_EXPOSURE_START_DATE), DOSE_UNIT_SOURCE_VALUE, CONCEPT_NAME) %>%
select(-PERSON_ID, -DRUG_CONCEPT_ID, -DOSE_UNIT_SOURCE_VALUE, -QUANTITY, -DAYS_SUPPLY, -ONE_DAY)
setnames(arrangeTable,
old = c("CONCEPT_NAME",
"DRUG_EXPOSURE_START_DATE",
"DRUG_EXPOSURE_END_DATE",
"DAYS_SUPPLY"),
new = c("Drug Name",
"Date of prescription",
"Medication end date",
"Medication period(days)")
)
str(arrangeTable)
datatable(
drugData,
options = list(
selection = "single",
pageLength = 20)
) %>%
formatStyle(
columns = 1:4,
textAlign = "left",
selector = "th"
) %>%
formatStyle(
columns = -c(1:7),
color = 'white',
backgroundColor = 'gray',
fontWeight = 'bold')
datatable(
drugData,
options = list(
selection = "single",
pageLength = 20)
) %>%
formatStyle(
columns = -c(1:7),
color = 'white',
backgroundColor = 'gray',
fontWeight = 'bold') %>%
formatStyle(
columns = 1:4,
textAlign = "left",
selector = "th"
)
datatable(
drugData,
options = list(
selection = "single",
pageLength = 20)
) %>%
formatStyle(
columns = -c(1:7),
color = 'white',
backgroundColor = 'gray',
fontWeight = 'bold')
datatable(
drugData,
options = list(
selection = "single",
pageLength = 20)
) %>%
formatStyle(
columns = -c(1,3,5,7),
color = 'white',
backgroundColor = 'gray',
fontWeight = 'bold')
ncol(drugData)
(ncol(drugData)-6)
columns(drugData)[(ncol(drugData)-6):ncol(drugData)]
datatable(
drugData,
options = list(
selection = "single",
pageLength = 20)
) %>%
formatStyle(
columns = c(5:11),
color = 'white',
backgroundColor = 'gray',
fontWeight = 'bold')
datatable(
drugData,
options = list(
selection = "single",
pageLength = 20)
) %>%
formatStyle(
columns = c(5:11),
color = 'white',
backgroundColor = '#D5D5D5',
fontWeight = 'bold')
datatable(
drugData,
options = list(
selection = "single",
pageLength = 20)
) %>%
formatStyle(
columns = c(5:11),
backgroundColor = '#D5D5D5',
fontWeight = 'bold')
datatable(
drugData,
options = list(
selection = "single",
pageLength = 20)
) %>%
formatStyle(
columns = c(6,8,10),
backgroundColor = '#D5D5D5',
fontWeight = 'bold')
datatable(
drugData,
options = list(
selection = "single",
pageLength = 20)
) %>%
formatStyle(
columns = c(6,8,10),
color = 'white',
backgroundColor = '#D5D5D5',
fontWeight = 'bold')
datatable(
drugData,
options = list(
selection = "single",
pageLength = 20)
) %>%
formatStyle(
columns = c(6,8,10),
color = 'white',
backgroundColor = '#ACACAC',
fontWeight = 'bold')
# Antibiotics drugs
Antibiotics <- read.csv("./inst/csv/AntibioticsConcepts.csv")
Antibiotics
Antibiotics_conceptID <- Antibiotics$Concept.ID
if(drugstart == drugend){
filterSubject <- df_drug %>%
filter(DRUG_EXPOSURE_START_DATE == drugstart)
}else{
filterSubject <- df_drug %>%
filter(DRUG_EXPOSURE_START_DATE >= drugstart & DRUG_EXPOSURE_END_DATE <= drugend)
}
filterSubject$ONE_DAY <- round(filterSubject$QUANTITY/filterSubject$DAYS_SUPPLY, digits = 2)
filterSubject$ONE_UNIT <- ifelse(!is.na(filterSubject$DOSE_UNIT_SOURCE_VALUE),
paste(filterSubject$ONE_DAY, filterSubject$DOSE_UNIT_SOURCE_VALUE),
filterSubject$ONE_DAY)
# delete concept ID = 0 and duplication
filterSubject <- filterSubject[filterSubject$DRUG_CONCEPT_ID != 0, ]
filterSubject <- filterSubject %>% distinct()
# 날짜 범위 생성 함수
generate_date_range <- function(date) {
seq(from = as.Date(date) - 3, to = as.Date(date) + 3, by = "day")
}
date_range <- generate_date_range(drugstart)  # generate_date_range(drugstart)로 날짜 범위 생성
for (date in date_range) {
col_name <- as.character(as.Date(date))  # 컬럼명으로 사용할 날짜를 문자열로 저장
filterSubject[[col_name]] <- ifelse(date >= filterSubject$DRUG_EXPOSURE_START_DATE & date <= filterSubject$DRUG_EXPOSURE_END_DATE, "O", "")
}
str(filterSubject)
filterSubject$DRUG_CONCEPT_ID %in% Antibiotics_conceptID
Antibiotics_conceptID
filterSubject$DRUG_CONCEPT_ID
str(filterSubject$DRUG_CONCEPT_ID)
str(Antibiotics_conceptID)
ifelse(filterSubject$DRUG_CONCEPT_ID %in% Antibiotics_conceptID, "O", "")
if(drugstart == drugend){
filterSubject <- df_drug %>%
filter(DRUG_EXPOSURE_START_DATE == drugstart)
}else{
filterSubject <- df_drug %>%
filter(DRUG_EXPOSURE_START_DATE >= drugstart & DRUG_EXPOSURE_END_DATE <= drugend)
}
filterSubject$ONE_DAY <- round(filterSubject$QUANTITY/filterSubject$DAYS_SUPPLY, digits = 2)
filterSubject$ONE_UNIT <- ifelse(!is.na(filterSubject$DOSE_UNIT_SOURCE_VALUE),
paste(filterSubject$ONE_DAY, filterSubject$DOSE_UNIT_SOURCE_VALUE),
filterSubject$ONE_DAY)
# delete concept ID = 0 and duplication
filterSubject <- filterSubject[filterSubject$DRUG_CONCEPT_ID != 0, ]
filterSubject <- filterSubject %>% distinct()
# Antibiotics drugs
Antibiotics <- read.csv("./inst/csv/AntibioticsConcepts.csv")
Antibiotics_conceptID <- Antibiotics$Concept.ID
filterSubject$Antibiotics <- ifelse(filterSubject$DRUG_CONCEPT_ID %in% Antibiotics_conceptID, "O", "")
# 날짜 범위 생성 함수
generate_date_range <- function(date) {
seq(from = as.Date(date) - 3, to = as.Date(date) + 3, by = "day")
}
date_range <- generate_date_range(drugstart)  # generate_date_range(drugstart)로 날짜 범위 생성
for (date in date_range) {
col_name <- as.character(as.Date(date))  # 컬럼명으로 사용할 날짜를 문자열로 저장
filterSubject[[col_name]] <- ifelse(date >= filterSubject$DRUG_EXPOSURE_START_DATE & date <= filterSubject$DRUG_EXPOSURE_END_DATE, "O", "")
}
# Drug
rc_druglist <- reactive({
subject_id <- as.numeric(input$searchSubject)
drugstart <- as.Date(as.character(input$drugDate[1]))
drugend <- as.Date(as.character(input$drugDate[2]))
sql_drug <- "SELECT f.person_id, f.drug_concept_id, z.concept_name, f.drug_exposure_start_date, f.drug_exposure_end_date, f.dose_unit_source_value, f.quantity, f.days_supply
FROM @cdm_database_schema.drug_exposure f, @cdm_database_schema.CONCEPT z
where f.person_id = @subjectID and f.drug_concept_id = z.concept_id;"
sql_drug <- "SELECT f.person_id, f.drug_concept_id, z.concept_name, f.drug_era_start_date, f.drug_era_end_date
FROM @cdm_database_schema.drug_exposure f, @cdm_database_schema.CONCEPT z
where f.person_id = @subjectID and f.drug_concept_id = z.concept_id;"
sql_drug <- SqlRender::render(sql_drug,
cdm_database_schema = cdmDatabaseSchema,
subjectID = subject_id)
df_drug <- as.data.frame(DatabaseConnector::querySql(connection, sql_drug))
if(drugstart == drugend){
filterSubject <- df_drug %>%
filter(DRUG_EXPOSURE_START_DATE == drugstart)
}else{
filterSubject <- df_drug %>%
filter(DRUG_EXPOSURE_START_DATE >= drugstart & DRUG_EXPOSURE_END_DATE <= drugend)
}
filterSubject$ONE_DAY <- round(filterSubject$QUANTITY/filterSubject$DAYS_SUPPLY, digits = 2)
filterSubject$ONE_UNIT <- ifelse(!is.na(filterSubject$DOSE_UNIT_SOURCE_VALUE),
paste(filterSubject$ONE_DAY, filterSubject$DOSE_UNIT_SOURCE_VALUE),
filterSubject$ONE_DAY)
# delete concept ID = 0 and duplication
filterSubject <- filterSubject[filterSubject$DRUG_CONCEPT_ID != 0, ]
filterSubject <- filterSubject %>% distinct()
# Antibiotics drugs
Antibiotics <- read.csv("./inst/csv/AntibioticsConcepts.csv")
Antibiotics_conceptID <- Antibiotics$Concept.ID
filterSubject$Antibiotics <- ifelse(filterSubject$DRUG_CONCEPT_ID %in% Antibiotics_conceptID, "O", "")
# 날짜 범위 생성 함수
generate_date_range <- function(date) {
seq(from = as.Date(date) - 3, to = as.Date(date) + 3, by = "day")
}
date_range <- generate_date_range(drugstart)  # generate_date_range(drugstart)로 날짜 범위 생성
for (date in date_range) {
col_name <- as.character(as.Date(date))  # 컬럼명으로 사용할 날짜를 문자열로 저장
filterSubject[[col_name]] <- ifelse(date >= filterSubject$DRUG_EXPOSURE_START_DATE & date <= filterSubject$DRUG_EXPOSURE_END_DATE, "O", "")
}
})
arrangeTable <- filterSubject %>%
arrange(desc(DRUG_EXPOSURE_START_DATE), DOSE_UNIT_SOURCE_VALUE, CONCEPT_NAME) %>%
select(-PERSON_ID, -DRUG_CONCEPT_ID, -DOSE_UNIT_SOURCE_VALUE, -QUANTITY, -DAYS_SUPPLY, -ONE_DAY)
setnames(arrangeTable,
old = c("CONCEPT_NAME",
"DRUG_EXPOSURE_START_DATE",
"DRUG_EXPOSURE_END_DATE",
"ONE_UNIT"),
new = c("Drug Name",
"Date of prescription",
"Medication end date",
"Medication period(days)")
)
drugData <- as.data.frame(arrangeTable)
datatable(
drugData,
options = list(
selection = "single",
pageLength = 20)
) %>%
formatStyle(
columns = c(6,8,10),
color = 'white',
backgroundColor = '#ACACAC',
fontWeight = 'bold')
datatable(
drugData,
options = list(
selection = "single",
pageLength = 20)
) %>%
formatStyle(
columns = c(7,9,11),
color = 'white',
backgroundColor = '#ACACAC',
fontWeight = 'bold')
arrangeTable <- filterSubject %>%
arrange(desc(DRUG_EXPOSURE_START_DATE), DOSE_UNIT_SOURCE_VALUE, CONCEPT_NAME) %>%
select(-PERSON_ID, -DRUG_CONCEPT_ID, -DOSE_UNIT_SOURCE_VALUE, -QUANTITY, -DAYS_SUPPLY, -ONE_DAY)
str(filterSubject)
filterSubject %>%
arrange(desc(DRUG_EXPOSURE_START_DATE), DOSE_UNIT_SOURCE_VALUE, CONCEPT_NAME) %>%
select(-PERSON_ID, -DRUG_CONCEPT_ID, -DOSE_UNIT_SOURCE_VALUE, -QUANTITY, -DAYS_SUPPLY, -ONE_DAY) %>%
filter(Antibiotics == "O")
nrow(arrangeTable)==0
arrangeTable <- filterSubject %>%
arrange(desc(DRUG_EXPOSURE_START_DATE), DOSE_UNIT_SOURCE_VALUE, CONCEPT_NAME) %>%
select(-PERSON_ID, -DRUG_CONCEPT_ID, -DOSE_UNIT_SOURCE_VALUE, -QUANTITY, -DAYS_SUPPLY, -ONE_DAY) %>%
filter(Antibiotics == "O")
nrow(arrangeTable)==0
if(nrow(arrangeTable)==0){
print("There are no antibiotic prescriptions.")
}else{
setnames(arrangeTable,
old = c("CONCEPT_NAME",
"DRUG_EXPOSURE_START_DATE",
"DRUG_EXPOSURE_END_DATE",
"ONE_UNIT"),
new = c("Drug Name",
"Date of prescription",
"Medication end date",
"Medication period(days)")
)
drugData <- as.data.frame(arrangeTable)
datatable(
drugData,
options = list(
selection = "single",
pageLength = 20)
) %>%
formatStyle(
columns = c(6,8,10),
color = 'white',
backgroundColor = '#ACACAC',
fontWeight = 'bold')
}
if(nrow(arrangeTable)==0){
return("There are no antibiotic prescriptions.")
}else{
setnames(arrangeTable,
old = c("CONCEPT_NAME",
"DRUG_EXPOSURE_START_DATE",
"DRUG_EXPOSURE_END_DATE",
"ONE_UNIT"),
new = c("Drug Name",
"Date of prescription",
"Medication end date",
"Medication period(days)")
)
drugData <- as.data.frame(arrangeTable)
datatable(
drugData,
options = list(
selection = "single",
pageLength = 20)
) %>%
formatStyle(
columns = c(6,8,10),
color = 'white',
backgroundColor = '#ACACAC',
fontWeight = 'bold')
}
if(nrow(arrangeTable)==0){
return(print("There are no antibiotic prescriptions."))
}else{
setnames(arrangeTable,
old = c("CONCEPT_NAME",
"DRUG_EXPOSURE_START_DATE",
"DRUG_EXPOSURE_END_DATE",
"ONE_UNIT"),
new = c("Drug Name",
"Date of prescription",
"Medication end date",
"Medication period(days)")
)
drugData <- as.data.frame(arrangeTable)
datatable(
drugData,
options = list(
selection = "single",
pageLength = 20)
) %>%
formatStyle(
columns = c(6,8,10),
color = 'white',
backgroundColor = '#ACACAC',
fontWeight = 'bold')
}
arrangeTable <- filterSubject %>%
arrange(desc(DRUG_EXPOSURE_START_DATE), DOSE_UNIT_SOURCE_VALUE, CONCEPT_NAME) %>%
select(-PERSON_ID, -DRUG_CONCEPT_ID, -DOSE_UNIT_SOURCE_VALUE, -QUANTITY, -DAYS_SUPPLY, -ONE_DAY) %>%
filter(Antibiotics == "O")
setnames(arrangeTable,
old = c("CONCEPT_NAME",
"DRUG_EXPOSURE_START_DATE",
"DRUG_EXPOSURE_END_DATE",
"ONE_UNIT"),
new = c("Drug Name",
"Date of prescription",
"Medication end date",
"Medication period(days)")
)
drugData <- as.data.frame(arrangeTable)
datatable(
drugData,
options = list(
selection = "single",
pageLength = 20)
) %>%
formatStyle(
columns = c(6,8,10),
color = 'white',
backgroundColor = '#ACACAC',
fontWeight = 'bold')
runApp('inst/infectionApp')
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
library(infection)
# # Following two packages are recommended to install before infection
# install.packages("devtools")
# devtools::install_github("OHDSI/DatabaseConnector")
# devtools::install_github("OHDSI/SqlRender")
# library(infection)
library(devtools)
library(DatabaseConnector)
library(SqlRender)
library(lubridate)
library(ggplot2)
library(dplyr)
library(RSQLite)
library(plotly)
library(quantmod)
library(data.table)
library(shiny)
library(shinydashboard)
library(shinythemes)
library(summaryBox)
library(DT)
library(ggrepel)
library(gridExtra)
library(shinyWidgets)
library(shinyalert)
library(stringr)
library(rgdal)
library(ggiraphExtra)
library(kormaps2014)
library(shinycssloaders)
library(purrr)
library(XML)
# 1.DB connect
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms= "sql server",
server='128.1.99.58',
user='seol',
password='Asdf1004!!',
port='1433',
pathToDriver = '/home/seol/code')
oracleTempSchema <- NULL
cdmDatabaseSchema <- "CDM534_infection.dbo"
cohortDatabaseSchema <- "cohortDb.dbo"
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
# 2.sample cohort table create
createCohort <- F # Create sample cohort table for test
generateCohort <- F
cohortTable <- "seol_influenza_230523"
targetCohortId <- 2850
DiganosisConceptID <- '46273463' # Influenza ConceptID
CreateCohort(createCohort,
generateCohort,
connection,
cohortDatabaseSchema,
cohortTable,
DiganosisConceptID)
# Load Cohort table
Cohort_dg <- loadCohortTable_dg(connection,
cohortDatabaseSchema,
cohortTable)
Cohort_v <- loadCohortTable_v(connection,
cohortDatabaseSchema,
cohortTable)
Cohort_c <- loadCohortTable_c(connection,
cohortDatabaseSchema,
cohortTable)
Cohort_p <- loadCohortTable_p(connection,
cohortDatabaseSchema,
cohortTable)
Antibiotics <- read.csv("./inst/csv/AntibioticsConcepts.csv")
# 3. Run APP
# runShinyApp()
